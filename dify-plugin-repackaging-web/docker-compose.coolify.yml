version: '3.8'

services:
  backend:
    build: ./backend
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS:-["http://localhost"]}
      - TEMP_DIR=/app/temp
      - SCRIPTS_DIR=/app/scripts
      - RATE_LIMIT_PER_MINUTE=${RATE_LIMIT_PER_MINUTE:-10}
      - FILE_RETENTION_HOURS=${FILE_RETENTION_HOURS:-24}
    volumes:
      - temp-data:/app/temp
      - ./backend/scripts:/app/scripts:ro
    depends_on:
      - redis
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  worker:
    build: ./backend
    restart: unless-stopped
    command: celery -A app.workers.celery_app worker --loglevel=info --concurrency=2
    environment:
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - TEMP_DIR=/app/temp
      - SCRIPTS_DIR=/app/scripts
    volumes:
      - temp-data:/app/temp
      - ./backend/scripts:/app/scripts:ro
    depends_on:
      - redis
      - backend
    networks:
      - app-network

  celery-beat:
    build: ./backend
    restart: unless-stopped
    command: celery -A app.workers.celery_app beat --loglevel=info
    environment:
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
      - backend
    networks:
      - app-network

  frontend:
    build: ./frontend
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --save 60 1 --loglevel warning
    volumes:
      - redis-data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    build: ./nginx
    restart: unless-stopped
    # IMPORTANT: No ports mapping! Coolify's Traefik will handle external access
    # Only expose the port internally for container-to-container communication
    expose:
      - "80"
    depends_on:
      - backend
      - frontend
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      # Coolify/Traefik will use these labels for routing
      - "coolify.managed=true"

volumes:
  redis-data:
  temp-data:

networks:
  app-network:
    driver: bridge