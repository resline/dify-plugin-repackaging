# Multi-stage build for all-in-one container

# Stage 1: Build frontend
FROM node:18-alpine AS frontend-builder
WORKDIR /app/frontend
COPY frontend/package.json ./
RUN npm install
COPY frontend/ ./
RUN npm run build

# Stage 2: Build backend with all services
FROM python:3.12-slim
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    nginx \
    supervisor \
    redis-server \
    curl \
    unzip \
    jq \
    wget \
    git \
    && rm -rf /var/lib/apt/lists/*

# Copy backend code
COPY backend/requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt

COPY backend/ ./backend/
COPY --from=frontend-builder /app/frontend/dist /usr/share/nginx/html
COPY start.sh /start.sh
RUN chmod +x /start.sh

# Create scripts directory and download dify-plugin binaries
RUN mkdir -p /app/scripts && \
    cd /app/scripts && \
    wget -q https://github.com/resline/dify-plugin-repackaging/raw/main/dify-plugin-linux-amd64-5g && \
    wget -q https://github.com/resline/dify-plugin-repackaging/raw/main/plugin_repackaging.sh && \
    chmod +x dify-plugin-linux-amd64-5g plugin_repackaging.sh

# Create Redis config for persistence
RUN mkdir -p /var/lib/redis && \
    echo "dir /var/lib/redis\n\
save 900 1\n\
save 300 10\n\
save 60 10000\n\
appendonly yes\n\
appendfilename \"appendonly.aof\"" > /etc/redis/redis.conf

# Create log directory
RUN mkdir -p /var/log/supervisor

# Create supervisor config
RUN echo "[supervisord]\n\
nodaemon=true\n\
user=root\n\
logfile=/var/log/supervisor/supervisord.log\n\
logfile_maxbytes=50MB\n\
logfile_backups=10\n\
loglevel=info\n\
pidfile=/var/run/supervisord.pid\n\
\n\
\n\
[program:backend]\n\
command=uvicorn app.main:app --host 0.0.0.0 --port 8000 --limit-max-requests 1000 --limit-concurrency 1000\n\
directory=/app/backend\n\
autostart=true\n\
autorestart=true\n\
environment=REDIS_URL=\"redis://localhost:6379/0\",CELERY_BROKER_URL=\"redis://localhost:6379/0\",CELERY_RESULT_BACKEND=\"redis://localhost:6379/0\",MAX_UPLOAD_SIZE=\"104857600\",PYTHONPATH=\"/app/backend\"\n\
startsecs=10\n\
stopwaitsecs=60\n\
stdout_logfile=/var/log/backend.log\n\
stderr_logfile=/var/log/backend.err\n\
stdout_logfile_maxbytes=10MB\n\
stdout_logfile_backups=3\n\
stderr_logfile_maxbytes=10MB\n\
stderr_logfile_backups=3\n\
\n\
[program:worker]\n\
command=celery -A app.workers.celery_app worker --loglevel=info --concurrency=4 --max-tasks-per-child=100\n\
directory=/app/backend\n\
autostart=true\n\
autorestart=unexpected\n\
exitcodes=0\n\
environment=REDIS_URL=\"redis://localhost:6379/0\",CELERY_BROKER_URL=\"redis://localhost:6379/0\",CELERY_RESULT_BACKEND=\"redis://localhost:6379/0\",PYTHONPATH=\"/app/backend\"\n\
startsecs=10\n\
stopwaitsecs=600\n\
stopasgroup=true\n\
killasgroup=true\n\
stdout_logfile=/var/log/celery-worker.log\n\
stderr_logfile=/var/log/celery-worker.err\n\
stdout_logfile_maxbytes=10MB\n\
stdout_logfile_backups=3\n\
stderr_logfile_maxbytes=10MB\n\
stderr_logfile_backups=3\n\
\n\
[program:celery-beat]\n\
command=celery -A app.workers.celery_app beat --loglevel=info\n\
directory=/app/backend\n\
autostart=true\n\
autorestart=true\n\
environment=REDIS_URL=\"redis://localhost:6379/0\",CELERY_BROKER_URL=\"redis://localhost:6379/0\",CELERY_RESULT_BACKEND=\"redis://localhost:6379/0\",PYTHONPATH=\"/app/backend\"\n\
startsecs=10\n\
stopwaitsecs=60\n\
stdout_logfile=/var/log/celery-beat.log\n\
stderr_logfile=/var/log/celery-beat.err\n\
\n\
[program:nginx]\n\
command=nginx -g 'daemon off;'\n\
autostart=true\n\
autorestart=true\n\
startsecs=5\n\
stopwaitsecs=30\n\
stdout_logfile=/var/log/nginx-supervisor.log\n\
stderr_logfile=/var/log/nginx-supervisor.err" > /etc/supervisor/conf.d/supervisord.conf

# Create nginx config for all-in-one setup
RUN echo 'events { worker_connections 1024; }\n\
http {\n\
    include /etc/nginx/mime.types;\n\
    default_type application/octet-stream;\n\
    keepalive_timeout 1800s;\n\
    send_timeout 1800s;\n\
    \n\
    # Map to handle WebSocket upgrade\n\
    map $http_upgrade $connection_upgrade {\n\
        default upgrade;\n\
        "" close;\n\
    }\n\
    \n\
    # Upstream backend server\n\
    upstream backend {\n\
        server localhost:8000;\n\
        keepalive 64;\n\
    }\n\
    \n\
    server {\n\
        listen 80;\n\
        server_name localhost;\n\
        \n\
        client_max_body_size 500M;\n\
        client_body_timeout 1800s;\n\
        client_header_timeout 1800s;\n\
        \n\
        # Security headers\n\
        add_header X-Frame-Options "SAMEORIGIN" always;\n\
        add_header X-Content-Type-Options "nosniff" always;\n\
        add_header X-XSS-Protection "1; mode=block" always;\n\
        \n\
        location / {\n\
            root /usr/share/nginx/html;\n\
            try_files $uri /index.html;\n\
            add_header Cache-Control "no-cache, no-store, must-revalidate";\n\
        }\n\
        \n\
        location /api {\n\
            proxy_pass http://backend;\n\
            proxy_http_version 1.1;\n\
            \n\
            # Headers for regular HTTP requests\n\
            proxy_set_header Host $host;\n\
            proxy_set_header X-Real-IP $remote_addr;\n\
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\
            proxy_set_header X-Forwarded-Proto $scheme;\n\
            proxy_set_header X-Forwarded-Host $host;\n\
            proxy_set_header X-Forwarded-Port $server_port;\n\
            \n\
            # Connection handling\n\
            proxy_set_header Connection "";\n\
            \n\
            # Timeouts\n\
            proxy_connect_timeout 1800s;\n\
            proxy_send_timeout 1800s;\n\
            proxy_read_timeout 1800s;\n\
            \n\
            # Disable buffering for better streaming\n\
            proxy_request_buffering off;\n\
            proxy_buffering off;\n\
        }\n\
        \n\
        # WebSocket location with exact match for better performance\n\
        location ~ ^/ws/tasks/(.*)$ {\n\
            proxy_pass http://backend/ws/tasks/$1;\n\
            proxy_http_version 1.1;\n\
            \n\
            # WebSocket specific headers\n\
            proxy_set_header Upgrade $http_upgrade;\n\
            proxy_set_header Connection $connection_upgrade;\n\
            \n\
            # Standard headers\n\
            proxy_set_header Host $host;\n\
            proxy_set_header X-Real-IP $remote_addr;\n\
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\
            proxy_set_header X-Forwarded-Proto $scheme;\n\
            proxy_set_header X-Forwarded-Host $host;\n\
            proxy_set_header X-Forwarded-Port $server_port;\n\
            \n\
            # WebSocket timeouts (much longer for persistent connections)\n\
            proxy_connect_timeout 7d;\n\
            proxy_send_timeout 7d;\n\
            proxy_read_timeout 7d;\n\
            \n\
            # Disable buffering for WebSocket\n\
            proxy_buffering off;\n\
            proxy_request_buffering off;\n\
            \n\
            # Handle large frames\n\
            proxy_buffer_size 64k;\n\
            proxy_buffers 8 64k;\n\
            proxy_busy_buffers_size 128k;\n\
        }\n\
        \n\
        # General /ws location for other WebSocket endpoints\n\
        location /ws {\n\
            proxy_pass http://backend;\n\
            proxy_http_version 1.1;\n\
            \n\
            # WebSocket specific headers\n\
            proxy_set_header Upgrade $http_upgrade;\n\
            proxy_set_header Connection $connection_upgrade;\n\
            \n\
            # Standard headers\n\
            proxy_set_header Host $host;\n\
            proxy_set_header X-Real-IP $remote_addr;\n\
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\
            proxy_set_header X-Forwarded-Proto $scheme;\n\
            proxy_set_header X-Forwarded-Host $host;\n\
            proxy_set_header X-Forwarded-Port $server_port;\n\
            \n\
            # WebSocket timeouts\n\
            proxy_connect_timeout 7d;\n\
            proxy_send_timeout 7d;\n\
            proxy_read_timeout 7d;\n\
            \n\
            # Disable buffering\n\
            proxy_buffering off;\n\
            proxy_request_buffering off;\n\
        }\n\
        \n\
        location /health {\n\
            proxy_pass http://backend/health;\n\
            proxy_http_version 1.1;\n\
            proxy_set_header Host $host;\n\
            proxy_set_header Connection "";\n\
        }\n\
    }\n\
}' > /etc/nginx/nginx.conf

# Set environment variables
ENV REDIS_URL="redis://localhost:6379/0"
ENV CELERY_BROKER_URL="redis://localhost:6379/0"
ENV CELERY_RESULT_BACKEND="redis://localhost:6379/0"
ENV PYTHONPATH=/app/backend

EXPOSE 80

CMD ["/start.sh"]