name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests (useful for hotfixes)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '20'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job: Code Quality Checks
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            pre-commit-${{ runner.os }}-

      - name: Install pre-commit
        run: |
          pip install pre-commit
          pre-commit install

      - name: Run pre-commit checks
        run: pre-commit run --all-files

  # Job: Shell Script Analysis
  shellcheck:
    name: Shell Script Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@master
        with:
          scandir: '.'
          severity: error
          check_together: 'yes'

  # Job: Backend Unit Tests
  backend-unit-tests:
    name: Backend Unit Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12']
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            dify-plugin-repackaging-web/backend/requirements.txt
            dify-plugin-repackaging-web/backend/requirements-test.txt

      - name: Install dependencies
        working-directory: ./dify-plugin-repackaging-web/backend
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Run unit tests with coverage
        working-directory: ./dify-plugin-repackaging-web/backend
        env:
          REDIS_URL: redis://localhost:6379/0
          TESTING: true
        run: |
          pytest tests/unit \
            --cov=app \
            --cov-report=xml \
            --cov-report=html:htmlcov \
            --cov-report=term-missing \
            --junitxml=test-results/junit.xml \
            --html=test-results/report.html \
            --self-contained-html \
            -v

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-unit-test-results-py${{ matrix.python-version }}
          path: |
            dify-plugin-repackaging-web/backend/test-results/
            dify-plugin-repackaging-web/backend/htmlcov/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./dify-plugin-repackaging-web/backend/coverage.xml
          flags: backend-unit,python-${{ matrix.python-version }}
          name: backend-unit-py${{ matrix.python-version }}

  # Job: Frontend Unit Tests
  frontend-unit-tests:
    name: Frontend Unit Tests (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        node-version: ['18', '20']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: dify-plugin-repackaging-web/frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./dify-plugin-repackaging-web/frontend
        run: npm ci

      - name: Run linting
        working-directory: ./dify-plugin-repackaging-web/frontend
        run: npm run lint

      - name: Run type checking
        working-directory: ./dify-plugin-repackaging-web/frontend
        run: npm run type-check

      - name: Run unit tests with coverage
        working-directory: ./dify-plugin-repackaging-web/frontend
        run: npm run test:unit -- --coverage

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-unit-test-results-node${{ matrix.node-version }}
          path: |
            dify-plugin-repackaging-web/frontend/coverage/
            dify-plugin-repackaging-web/frontend/test-results/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./dify-plugin-repackaging-web/frontend/coverage/lcov.info
          flags: frontend-unit,node-${{ matrix.node-version }}
          name: frontend-unit-node${{ matrix.node-version }}

  # Job: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [code-quality, shellcheck]
    if: github.event.inputs.skip_tests != 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build test images
        run: |
          docker-compose -f docker-compose.test.yml build --parallel

      - name: Run integration tests
        run: |
          ./run_integration_tests.sh --coverage

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            test-results/
            coverage/

      - name: Upload coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v4
        with:
          directory: ./coverage
          flags: integration
          name: integration-coverage

      - name: Publish test results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: test-results/junit.xml
          check_name: Integration Test Results

      - name: Clean up
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml -p dify-repack-test down -v

  # Job: E2E Tests
  e2e-tests:
    name: E2E Tests (${{ matrix.browser }})
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [backend-unit-tests, frontend-unit-tests]
    if: github.event.inputs.skip_tests != 'true'
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: dify-plugin-repackaging-web/frontend/package-lock.json

      - name: Install Playwright dependencies
        working-directory: ./dify-plugin-repackaging-web/frontend
        run: |
          npm ci
          npx playwright install --with-deps ${{ matrix.browser }}

      - name: Start services with Docker Compose
        run: |
          docker-compose -f docker-compose.yml up -d
          ./scripts/wait-for-services.sh

      - name: Run E2E tests
        working-directory: ./dify-plugin-repackaging-web/frontend
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000
          CI: true
        run: |
          npx playwright test --project=${{ matrix.browser }} --reporter=json,html

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results-${{ matrix.browser }}
          path: |
            dify-plugin-repackaging-web/frontend/playwright-report/
            dify-plugin-repackaging-web/frontend/test-results/

      - name: Upload Playwright traces
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-traces-${{ matrix.browser }}
          path: dify-plugin-repackaging-web/frontend/test-results/

  # Job: Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [code-quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security testing tools
        run: |
          pip install safety bandit semgrep

      - name: Run safety check
        working-directory: ./dify-plugin-repackaging-web/backend
        continue-on-error: true
        run: |
          pip install -r requirements.txt
          safety check --json > security-results/safety-report.json

      - name: Run bandit security scan
        working-directory: ./dify-plugin-repackaging-web/backend
        run: |
          bandit -r app/ -f json -o security-results/bandit-report.json

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/python
            p/javascript
            p/typescript
            p/docker
          generateSarif: true

      - name: Upload security results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-test-results
          path: |
            security-results/
            .semgrep/

  # Job: Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [integration-tests]
    if: github.event.ref == 'refs/heads/main' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Locust
        run: |
          pip install locust

      - name: Start services
        run: |
          docker-compose -f docker-compose.yml up -d
          ./scripts/wait-for-services.sh

      - name: Run performance tests
        run: |
          cd testing/performance-tests
          locust -f locustfile.py \
            --host http://localhost:8000 \
            --users 50 \
            --spawn-rate 5 \
            --run-time 5m \
            --headless \
            --html performance-report.html \
            --csv performance-results

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-test-results
          path: |
            testing/performance-tests/performance-report.html
            testing/performance-tests/performance-results*.csv

  # Job: Build Docker Images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [backend-unit-tests, frontend-unit-tests]
    strategy:
      matrix:
        include:
          - context: .
            dockerfile: Dockerfile
            image: dify-plugin-repackaging
          - context: ./dify-plugin-repackaging-web/backend
            dockerfile: Dockerfile
            image: dify-plugin-repackaging-backend
          - context: ./dify-plugin-repackaging-web/frontend
            dockerfile: Dockerfile
            image: dify-plugin-repackaging-frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.context }}/${{ matrix.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Job: Generate Test Report
  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [backend-unit-tests, frontend-unit-tests, integration-tests, e2e-tests]
    if: always()
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: all-test-results

      - name: Merge test results
        run: |
          mkdir -p merged-results
          find all-test-results -name "*.xml" -exec cp {} merged-results/ \;

      - name: Generate consolidated report
        uses: dorny/test-reporter@v1
        with:
          name: 'Test Results Summary'
          path: 'merged-results/*.xml'
          reporter: 'java-junit'

      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: test-results
          message: |
            ## Test Results Summary
            
            | Test Suite | Status | Details |
            |------------|--------|---------|
            | Backend Unit Tests | ${{ needs.backend-unit-tests.result }} | [View Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) |
            | Frontend Unit Tests | ${{ needs.frontend-unit-tests.result }} | [View Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) |
            | Integration Tests | ${{ needs.integration-tests.result }} | [View Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) |
            | E2E Tests | ${{ needs.e2e-tests.result }} | [View Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) |

  # Job: Deploy (only on main branch)
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [integration-tests, e2e-tests, security-tests, build-docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production..."
          # Add your deployment scripts here

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()